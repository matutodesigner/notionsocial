generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

// Modelos para autenticação
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  password      String?
  accounts      Account[]
  sessions      Session[]
  notionDbs     NotionDatabase[]
  socialAccounts SocialAccount[]
  notionWorkspaces NotionWorkspace[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// Modelos específicos da aplicação
model NotionWorkspace {
  id          String   @id @default(cuid())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  notionId    String
  name        String
  icon        String?
  accessToken String
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  databases   NotionDatabase[]
}

model NotionDatabase {
  id          String   @id @default(cuid())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  name        String
  notionId    String
  active      Boolean  @default(true)
  lastSync    DateTime?
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  workspaceId String
  workspace   NotionWorkspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  config      NotionDatabaseConfig?
  posts       Post[]
}

model NotionDatabaseConfig {
  id                String   @id @default(cuid())
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  statusColumn      String
  statusValue       String
  contentColumn     String
  imageColumn       String
  platformColumn    String
  dateColumn        String
  updateStatus      Boolean  @default(true)
  notifyOnPublish   Boolean  @default(true)
  databaseId        String   @unique
  database          NotionDatabase @relation(fields: [databaseId], references: [id], onDelete: Cascade)
  platformConfigs   PlatformConfig[]
}

model PlatformConfig {
  id                String   @id @default(cuid())
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  platform          String   // instagram, facebook, tiktok
  enabled           Boolean  @default(true)
  token             String?
  extraData         String?  // JSON string for platform-specific data
  configId          String
  config            NotionDatabaseConfig @relation(fields: [configId], references: [id], onDelete: Cascade)
}

model SocialAccount {
  id          String   @id @default(cuid())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  platform    String   // instagram, facebook, tiktok
  name        String
  accountId   String
  token       String
  status      String   @default("connected") // connected, disconnected
  lastSync    DateTime?
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  posts       Post[]
}

model Post {
  id              String   @id @default(cuid())
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  title           String
  content         String
  imageUrl        String?
  status          String   // published, scheduled, draft
  publishedAt     DateTime?
  scheduledFor    DateTime?
  notionRecordId  String?
  databaseId      String
  database        NotionDatabase @relation(fields: [databaseId], references: [id], onDelete: Cascade)
  socialAccountId String?
  socialAccount   SocialAccount? @relation(fields: [socialAccountId], references: [id])
}

